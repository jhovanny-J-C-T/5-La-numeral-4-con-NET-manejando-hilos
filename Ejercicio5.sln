using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

class Program
{
    static void Main()
    {
        // Definir la cantidad de números en la serie
        const int cantidadNumeros = 100000;

        // Arreglos para almacenar los números y los resultados
        int[] numeros = new int[cantidadNumeros];
        List<int> resultados = new List<int>();

        // Inicializar la lista de resultados con ceros
        for (int i = 0; i < cantidadNumeros; i++)
        {
            resultados.Add(0);
        }

        // Crear y ejecutar tareas en paralelo utilizando Parallel.For
        Parallel.For(0, cantidadNumeros, i =>
        {
            // Asignar valores a los números
            numeros[i] = i + 1;
            
            // Calcular y almacenar el resultado para cada número
            CalcularNumero(i, numeros[i], resultados);
        });

        // Mostrar toda la serie
        Console.WriteLine("Serie generada con 100000 posiciones:");
        for (int i = 0; i < cantidadNumeros; i++)
        {
            Console.Write(resultados[i]);
            if (i < cantidadNumeros - 1)
            {
                Console.Write(", ");
            }
        }

        Console.WriteLine();

        // Esperar la entrada del usuario antes de cerrar la consola
        Console.WriteLine("\nPresiona Enter para salir...");
        Console.ReadLine();
    }

    // Método para calcular y asignar el resultado según si el número es par o impar
    static void CalcularNumero(int index, int numero, List<int> resultados)
    {
        resultados[index] = (numero % 2 == 0) ? numero * 2 : numero * 2 + 1;
    }
}
